REACT NOTES

SETTING UP ENVIRONMENT
npm install -g create-react-app
create-react-app desired-directory-name

IMPORTING THE PROPER FUNCTIONALITY

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css'

NOTE: I think if you import the css file, you might not need to link it to your html page. I'm not sure but I think this is correct.

SCRIPTS: Note that your package.json file contains multiple react scripts that already come included with it. I don't know what they all mean but I'll come up with theories for now.

  START: I believe the start script creates a server for you and opens your page in your browser.
  BUILD: This makes it so that you create a production build since the development build is not suited for that.
    npm install -g serve: When you run the above command, it becomes ready to be served, you may serve it with a  static server by running this code.
    serve -s build

  TEST:
  EJECT:

INSTALLING LANGUAGE-BABEL USING ATOM: apm install language-babel.
REACT: Is a declarative, efficient, and flexible JavaScript JS Library for building  user interfaces.

-----------------------------------------------------------------------------------
COMPONENTS: React works through components, which are access like this; React.Component. Your components tell react what you want to render, then react will efficiently update and render just the right components when your data changes.


  React Component class, or React component type: A componennt takes in parameters, called props, and returns a hierarchy of views to display vie the render method.

  RENDER(): The render method returns a description of what you want to render,
  and then React takes that description, and renders it to the screen. In particular, render returns a React element, which is a lightweight description of what to render.

-----------------------------------------------------------------------------------
JSX: Most React developers use this special syntax, which makes it easier to write these structures.

-----------------------------------------------------------------------------------
REACT.CREATEELEMENT: Note that this would take the place of using JSX, but it looks like most people use JSX instead so keep that in mind.
    EXAMPLE:
      return React.createElement('div', {className: 'shopping-list'},
        React.createElement('h1', This is where h1 children would go),
        React.createElement('ul', This is where ul children would go)
      );

-----------------------------------------------------------------------------------
  JAVASCRIPT EXPRESSIONS: You can put any JS expressions within braces inside JSX. Each React element is a real JS object that you can store in a varible or pass around your program.

  COMPONENT SYNTAX: Each component is encapsulated so it can operate independently, which allows you to build complex UIs, out of simple components.
    EXAMPLE:
      <ComponentName />

-----------------------------------------------------------------------------------
HELLO WORLD EXAMPLE:
  React.DOM.render(
    <h1>Hello, World!</h1>,
    document.getElementById('ElementNameWhenYourCodeWillGo')
  );

-----------------------------------------------------------------------------------
EMBEDDING EXPRESSIONS IN JSX: You can embed any JS expression in JSX by wrapping it in curly braces.
  EXAMPLE:

    JS
    function formatName(user){
      return user.firstName + ' ' + user.lastName
    };

    const user = {
      firstName: 'Harper',
      lastName: 'Perez'
    };
    --------------

    JSX
    const element = (
      <h1>
        Hello, {formatName(user)}
      </h1>
    );

    ReactDOM.render(
      element,
      document.getElementById('root');

    )

-----------------------------------------------------------------------------------
JSX IS AN EXPRESSION TOO: After compilation, JSX expressions become regular JS function calls and evaluate to JS objects.
This means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments, and return it from functions.
  EXAMPLE:
    function getGreeting(user){
    if(user){
     return <h1>Hello, {formatName(user)}!</h1>;
    }
    return <h1>Hello, Stranger</h1>
  }

-----------------------------------------------------------------------------------
SPECIFYING ATTRIBUTES WITH JSX: You ma also use curly braces to embed a JS expression in an attribute
  EXAMPLE:
    const element = <img src={user.avatarUrl}></img>

    NOTE: Don't put quotes around curly braces when embedding a JS expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.

    WARNING: Since JSX is closer to JS  than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.
      EXAMPLE:
        class becomes className in JSX, and tabindex becomes tabIndex.
