REACT NOTES

SETTING UP ENVIRONMENT
npm install -g create-react-app
create-react-app desired-directory-name

IMPORTING THE PROPER FUNCTIONALITY

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css'

NOTE: I think if you import the css file, you might not need to link it to your html page. I'm not sure but I think this is correct.

SCRIPTS: Note that your package.json file contains multiple react scripts that already come included with it. I don't know what they all mean but I'll come up with theories for now.

  START: I believe the start script creates a server for you and opens your page in your browser.
  BUILD: This makes it so that you create a production build since the development build is not suited for that.
    npm install -g serve: When you run the above command, it becomes ready to be served, you may serve it with a  static server by running this code.
    serve -s build

  TEST:
  EJECT:

INSTALLING LANGUAGE-BABEL USING ATOM: apm install language-babel.
REACT: Is a declarative, efficient, and flexible JavaScript JS Library for building  user interfaces.

-----------------------------------------------------------------------------------
COMPONENTS: React works through components, which are access like this; React.Component. Your components tell react what you want to render, then react will efficiently update and render just the right components when your data changes.


  React Component class, or React component type: A componennt takes in parameters, called props, and returns a hierarchy of views to display vie the render method.

  RENDER(): The render method returns a description of what you want to render,
  and then React takes that description, and renders it to the screen. In particular, render returns a React element, which is a lightweight description of what to render.

-----------------------------------------------------------------------------------
JSX: Most React developers use this special syntax, which makes it easier to write these structures.

-----------------------------------------------------------------------------------
REACT.CREATEELEMENT: Note that this would take the place of using JSX, but it looks like most people use JSX instead so keep that in mind.
    EXAMPLE:
      return React.createElement('div', {className: 'shopping-list'},
        React.createElement('h1', This is where h1 children would go),
        React.createElement('ul', This is where ul children would go)
      );

-----------------------------------------------------------------------------------
  JAVASCRIPT EXPRESSIONS: You can put any JS expressions within braces inside JSX. Each React element is a real JS object that you can store in a varible or pass around your program.

  COMPONENT SYNTAX: Each component is encapsulated so it can operate independently, which allows you to build complex UIs, out of simple components.
    EXAMPLE:
      <ComponentName />

-----------------------------------------------------------------------------------
HELLO WORLD EXAMPLE:
  React.DOM.render(
    <h1>Hello, World!</h1>,
    document.getElementById('ElementNameWhenYourCodeWillGo')
  );

-----------------------------------------------------------------------------------
EMBEDDING EXPRESSIONS IN JSX: You can embed any JS expression in JSX by wrapping it in curly braces.
  EXAMPLE:

    JS
    function formatName(user){
      return user.firstName + ' ' + user.lastName
    };

    const user = {
      firstName: 'Harper',
      lastName: 'Perez'
    };
    --------------

    JSX
    const element = (
      <h1>
        Hello, {formatName(user)}
      </h1>
    );

    ReactDOM.render(
      element,
      document.getElementById('root');

    )

-----------------------------------------------------------------------------------
JSX IS AN EXPRESSION TOO: After compilation, JSX expressions become regular JS function calls and evaluate to JS objects.
This means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments, and return it from functions.
  EXAMPLE:
    function getGreeting(user){
    if(user){
     return <h1>Hello, {formatName(user)}!</h1>;
    }
    return <h1>Hello, Stranger</h1>
  }

-----------------------------------------------------------------------------------
SPECIFYING ATTRIBUTES WITH JSX: You ma also use curly braces to embed a JS expression in an attribute
  EXAMPLE:
    const element = <img src={user.avatarUrl}></img>

    NOTE: Don't put quotes around curly braces when embedding a JS expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.

    WARNING: Since JSX is closer to JS  than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.
      EXAMPLE:
        class becomes className in JSX, and tabindex becomes tabIndex.



SPECIFYING CHILDREN WITH JSX: JSX tags may contain children
  EXAMPLE:
    const element = (
      <div>
        <h1>Hello!</h1>
        <h2>Good to see you here.</h2>
      </div>
    )

JSX PREVENTS INJECTION ATTACKS: It is safe to embed user input in JSX. By  default, React DOM escapes any values embedded in JSX before rendering them.
Thus it ensures that you can never inject anything that's not explicitly written in you application. Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks.

-----------------------------------------------------------------------------------
JSX REPRESENTS OBJECTS: Babel compiles JSX down to React.createElement() calls. The following 2 examples are identical
  EXAMPLE1:
    const element = (
      <h1 className = 'greeting'>
        Hello, world!
      </h1>
    );

  EXAMPLE2: Create element example
    const element = React.createElement(
      'h1',
      {className: 'greeting'},
      'Hello, World!'
    );

    REACT.CREATEELEMENT(): Performs a few checks to help you write bug-free code but essentially it creates an object like This
      //NOTE: This structure is simplified
        const element = {
        type: 'h1',
        props: {
        className: 'greeting',
        children: 'Hello, world'
        }
        }

////////////////////////////////////////////////////////////////////////////////////////
RENDERING ELEMENTS: Elements are the smallest building blocks of React apps. Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.
  EXAMPLE:
    const element = <h1>Hello, world</h1>

DIFFERENCE BETWEEN ELEMENTS AND COMPONENTS: Elements are what components are made of.

-----------------------------------------------------------------------------------
RENDERING ELEMENTS INTO THE DOM: Let's say there's a div somewhere in your HTML file, which contains the id of root
  EXAMPLE:
    <div id="root"></div>

  We call this a 'root' DOM node because everything inside it will be managed by React DOM.

  Applications built with just React usually have a single root DOM node. if you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.

  TO RENDER A REACT ELEMENT INTO A ROOT DOM NODE: pass both to ReactDOM.render();
    EXAMPLE:
      const element = <h1>Hello, world</h1>;
      ReactDOM.render(element, document.getElementById('root'));

-----------------------------------------------------------------------------------
UPDATING THE RENDERED ELEMENT: React elements are immutable. Once you create an element, you can't change its children or attributes.
An element is like a single frame in a movie: it represents the UI at a certain point in time.
  With our knowledge so far, the only way to update the UI is to create a new element, and pass it to reactDOM.render()
    EXAMPLE:
      function tick(){
        const element = (
          <div>
            <h1>Hello, World!</h1>
            <h2>It is {new Date().toLocaleTimeString()}.</h2>
          </div>
        )

        ReactDOM.render(element, document.getElementById('root'));
      }

      setInterval(tick, 1000);

  STATEFUL COMPONENTS: Following, the above example, go test it out on your console, and you're going to notice that react, only updates that section that keeps constantly updating. It doesn't have to update the entire page, every time which makes it much faster.

-----------------------------------------------------------------------------------
COMPONENTS AND PROPS: Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.
Conceptually, components are like JS  functions. They accept arbitrary inputs (called props) and return React elements describing what should appear on the screen.

  FUNCTIONAL AND CLASS COMPONENTS: The simplest way to define a component is to write a JS function.

  FUNCTIONAL COMPONENT
    EXAMPLE:
      function Welcome(props){
        return <h1>Hello, {props.name}</h1>;
      }

      This function is a valid component because it  accepts a single "props" (which stands for properties) object argument with data and returns a React element. We call such components "functional" because theya re literally JS functions.

  ES6 CLASSES TO DEFINE COMPONENTS:
    EXAMPLE:
      class Welcome extends React.Component{
        render(){
          return <h1>Hello, {this.props.name}</h1>
        }
      }

      NOTE: While the 2 components above are equivalent to React, using classes gives you additional features which will be discussed later. 

    RENDERING THIS FUNCTIONAL COMPONENT: Previously, we only encountered React elements that represent DOM tags, However, elements can also represent user-defined components
      EXAMPLE:























.
